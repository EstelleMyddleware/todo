<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="TaskRepository.php" path="\Repository">
    <totals>
      <lines total="79" comments="41" code="38" executable="7" executed="1" percent="14.29"/>
      <methods count="3" tested="1" percent="33.33"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="App\Repository\TaskRepository" start="19" executable="7" executed="1" crap="20.74">
      <namespace name="App\Repository"/>
      <method name="__construct" signature="__construct(Doctrine\Persistence\ManagerRegistry $registry)" start="21" end="24" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="add" signature="add(App\Entity\Task $entity, bool $flush): void" start="30" end="36" crap="6" executable="3" executed="0" coverage="0"/>
      <method name="remove" signature="remove(App\Entity\Task $entity, bool $flush): void" start="42" end="48" crap="6" executable="3" executed="0" coverage="0"/>
    </class>
    <coverage>
      <line nr="23">
        <covered by="App\Tests\Controller\TaskControllerTest::testUserCanReadTasksList"/>
        <covered by="App\Tests\Controller\TaskControllerTest::testLoggedInUsersCanAccessTaskCreationPage"/>
        <covered by="App\Tests\Controller\TaskControllerTest::testUserCanCreateNewTask"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_DECLARE">declare</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strict_types</token>
        <token name="T_EQUAL">=</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Repository</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6"/>
      <line no="7">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Entity\Task</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="8">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="9">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Doctrine\ORM\OptimisticLockException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="10">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Doctrine\ORM\ORMException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="11">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Doctrine\Persistence\ManagerRegistry</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="12"/>
      <line no="13">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="14">
        <token name="T_DOC_COMMENT"> * @method Task|null find($id, $lockMode = null, $lockVersion = null)</token>
      </line>
      <line no="15">
        <token name="T_DOC_COMMENT"> * @method Task|null findOneBy(array $criteria, array $orderBy = null)</token>
      </line>
      <line no="16">
        <token name="T_DOC_COMMENT"> * @method Task[]    findAll()</token>
      </line>
      <line no="17">
        <token name="T_DOC_COMMENT"> * @method Task[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)</token>
      </line>
      <line no="18">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="19">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TaskRepository</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXTENDS">extends</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ServiceEntityRepository</token>
      </line>
      <line no="20">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="21">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ManagerRegistry</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$registry</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="22">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="23">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">parent</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$registry</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Task</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_CLASS">class</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="25"/>
      <line no="26">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="27">
        <token name="T_DOC_COMMENT">     * @throws ORMException</token>
      </line>
      <line no="28">
        <token name="T_DOC_COMMENT">     * @throws OptimisticLockException</token>
      </line>
      <line no="29">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">add</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">Task</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$entity</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$flush</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="31">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="32">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">_em</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">persist</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$entity</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$flush</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">_em</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">flush</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="37"/>
      <line no="38">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="39">
        <token name="T_DOC_COMMENT">     * @throws ORMException</token>
      </line>
      <line no="40">
        <token name="T_DOC_COMMENT">     * @throws OptimisticLockException</token>
      </line>
      <line no="41">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">remove</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">Task</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$entity</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$flush</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">_em</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">remove</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$entity</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="45">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$flush</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">_em</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">flush</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="49"/>
      <line no="50">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">// /**</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//  * @return Task[] Returns an array of Task objects</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">//  */</token>
      </line>
      <line no="53">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/*</token>
      </line>
      <line no="54">
        <token name="T_COMMENT">    public function findByExampleField($value)</token>
      </line>
      <line no="55">
        <token name="T_COMMENT">    {</token>
      </line>
      <line no="56">
        <token name="T_COMMENT">        return $this-&gt;createQueryBuilder('t')</token>
      </line>
      <line no="57">
        <token name="T_COMMENT">            -&gt;andWhere('t.exampleField = :val')</token>
      </line>
      <line no="58">
        <token name="T_COMMENT">            -&gt;setParameter('val', $value)</token>
      </line>
      <line no="59">
        <token name="T_COMMENT">            -&gt;orderBy('t.id', 'ASC')</token>
      </line>
      <line no="60">
        <token name="T_COMMENT">            -&gt;setMaxResults(10)</token>
      </line>
      <line no="61">
        <token name="T_COMMENT">            -&gt;getQuery()</token>
      </line>
      <line no="62">
        <token name="T_COMMENT">            -&gt;getResult()</token>
      </line>
      <line no="63">
        <token name="T_COMMENT">        ;</token>
      </line>
      <line no="64">
        <token name="T_COMMENT">    }</token>
      </line>
      <line no="65">
        <token name="T_COMMENT">    */</token>
      </line>
      <line no="66"/>
      <line no="67">
        <token name="T_WHITESPACE">    </token>
        <token name="T_COMMENT">/*</token>
      </line>
      <line no="68">
        <token name="T_COMMENT">    public function findOneBySomeField($value): ?Task</token>
      </line>
      <line no="69">
        <token name="T_COMMENT">    {</token>
      </line>
      <line no="70">
        <token name="T_COMMENT">        return $this-&gt;createQueryBuilder('t')</token>
      </line>
      <line no="71">
        <token name="T_COMMENT">            -&gt;andWhere('t.exampleField = :val')</token>
      </line>
      <line no="72">
        <token name="T_COMMENT">            -&gt;setParameter('val', $value)</token>
      </line>
      <line no="73">
        <token name="T_COMMENT">            -&gt;getQuery()</token>
      </line>
      <line no="74">
        <token name="T_COMMENT">            -&gt;getOneOrNullResult()</token>
      </line>
      <line no="75">
        <token name="T_COMMENT">        ;</token>
      </line>
      <line no="76">
        <token name="T_COMMENT">    }</token>
      </line>
      <line no="77">
        <token name="T_COMMENT">    */</token>
      </line>
      <line no="78">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="79"/>
    </source>
  </file>
</phpunit>
